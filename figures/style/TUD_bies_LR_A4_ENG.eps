%!PS-Adobe-3.0 EPSF-3.0
%%Title: (TUD_bies_LR_A4_ENG.eps)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 11:25:51 10/01/04
%%For: (Jeroen J Dik)
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 612 108
%%HiResBoundingBox: 0.0 0.0 612.312012 107.713013
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1209 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-14, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:78986d01-3e7b-465d-a613-7eb8d9795673' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0.1 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:78986d01-3e7b-465d-a613-7eb8d9795673' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreateDate='2004-10-01T11:25:20+02:00' xap:CreatorTool='Adobe Illustrator(R) 8.0' xap:ModifyDate='2004-10-01T11:25:20+02:00'></rdf:Description>
<rdf:Description rdf:about='uuid:78986d01-3e7b-465d-a613-7eb8d9795673' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:78066488-62a0-4b68-8c71-94e2f08c12e0'/>
<rdf:Description rdf:about='uuid:78986d01-3e7b-465d-a613-7eb8d9795673' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:creator><rdf:Seq><rdf:li>Jeroen J Dik</rdf:li></rdf:Seq></dc:creator><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>TUD_bies_LR_A4_ENG.eps</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 612 108 rectclip
/N11 [/DeviceRGB] /E1 exch /ColorSpace defineRes

/ColorSpace defineRes pop

0.0 0.0 612.312012 107.713013 re
W
n
n
0.059998 0.060001 612.252014 44.331002 re
0.0 0.68235 0.93725 setrgbcolor
f
n
0.059998 44.504002 612.252014 62.958004 re
1.0 1.0 1.0  setrgbcolor
f
n
52.717003 37.109001 m
50.295002 37.109001 l
50.295002 36.0 l
52.529999 36.0 l
52.529999 34.906002 l
50.295002 34.906002 l
50.295002 32.391003 l
48.827003 32.391003 l
48.827003 38.203003 l
52.717003 38.203003 l
52.717003 37.109001 l
true setoverprint
0.13725 0.12157 0.12549  setrgbcolor
f
n
55.963001 32.855003 m
55.869999 32.777 55.786003 32.707001 55.712002 32.645 c
55.638004 32.582001 55.539001 32.52 55.415001 32.457001 c
55.293003 32.395 55.174004 32.344002 55.059002 32.307003 c
54.943001 32.27 54.782001 32.25 54.575001 32.25 c
54.189003 32.25 53.867004 32.383003 53.612003 32.645 c
53.356003 32.908001 53.229004 33.239998 53.229004 33.641003 c
53.229004 33.969002 53.293003 34.234001 53.423004 34.438004 c
53.553001 34.639 53.739998 34.801003 53.983002 34.918003 c
54.229004 35.039001 54.524002 35.123001 54.866001 35.172001 c
55.209003 35.219002 55.577003 35.256001 55.971004 35.281002 c
55.971004 35.307003 l
55.971004 35.557003 55.882004 35.73 55.706001 35.826 c
55.529003 35.922001 55.263004 35.969002 54.91 35.969002 c
54.749004 35.969002 54.562004 35.937 54.348003 35.877003 c
54.133003 35.814003 53.924004 35.736 53.719997 35.641003 c
53.604004 35.641003 l
53.604004 36.703003 l
53.739002 36.742001 53.958004 36.789001 54.259003 36.842003 c
54.561001 36.895 54.865002 36.922001 55.172001 36.922001 c
55.927002 36.922001 56.477001 36.797001 56.821003 36.543003 c
57.166004 36.291 57.338001 35.906002 57.338001 35.389 c
57.338001 32.391003 l
55.963001 32.391003 l
55.963001 32.855003 l
h
55.963001 33.521 m
55.963001 34.453003 l
55.732002 34.43 55.545002 34.408001 55.402004 34.393002 c
55.259003 34.375 55.119003 34.34 54.982002 34.291 c
54.862003 34.248001 54.77 34.184002 54.703003 34.098003 c
54.637001 34.012001 54.604004 33.896 54.604004 33.752003 c
54.604004 33.543003 54.659004 33.398003 54.77 33.32 c
54.879997 33.242001 55.043003 33.203003 55.258003 33.203003 c
55.377003 33.203003 55.499004 33.23 55.624004 33.287003 c
55.749004 33.342003 55.862003 33.422001 55.963001 33.521 c
f
n
60.649998 32.266003 m
60.289001 32.266003 59.957005 32.313 59.656002 32.402 c
59.356003 32.494003 59.094002 32.635002 58.873001 32.826 c
58.654003 33.018002 58.484001 33.258003 58.361004 33.545002 c
58.239002 33.834003 58.178001 34.174 58.178001 34.566002 c
58.178001 34.986 58.244003 35.346001 58.377003 35.641003 c
58.509998 35.936001 58.689003 36.18 58.916004 36.369003 c
59.135002 36.553001 59.392002 36.687 59.688004 36.775002 c
59.983002 36.863003 60.291004 36.906002 60.611004 36.906002 c
60.854004 36.906002 61.096004 36.879002 61.338001 36.822002 c
61.579998 36.768002 61.824001 36.678001 62.068005 36.557003 c
62.068005 35.391003 l
61.893002 35.391003 l
61.838001 35.441002 61.772003 35.498001 61.692001 35.561001 c
61.613003 35.621002 61.526005 35.678001 61.433002 35.73 c
61.334003 35.783001 61.222004 35.829998 61.097004 35.867001 c
60.972004 35.904003 60.833004 35.922001 60.68 35.922001 c
60.332005 35.922001 60.062004 35.799004 59.871002 35.555 c
59.68 35.311001 59.584003 34.98 59.584003 34.566002 c
59.584003 34.123001 59.686005 33.793003 59.889999 33.576 c
60.094002 33.359001 60.365002 33.25 60.704002 33.25 c
60.875004 33.25 61.026005 33.27 61.156002 33.309002 c
61.286003 33.349998 61.398003 33.396 61.491001 33.451 c
61.582005 33.506001 61.66 33.563 61.725002 33.623001 c
61.789997 33.682003 61.846004 33.734001 61.893002 33.781002 c
62.068005 33.781002 l
62.068005 32.607002 l
61.989998 32.572002 61.900002 32.533001 61.797005 32.488003 c
61.694004 32.445 61.589005 32.408001 61.482002 32.379002 c
61.349998 32.344002 61.225002 32.314003 61.109001 32.295002 c
60.994003 32.275002 60.84 32.266003 60.649998 32.266003 c
f
n
66.947006 32.391003 m
65.572006 32.391003 l
65.572006 32.859001 l
65.336006 32.66 65.119003 32.509998 64.922005 32.406002 c
64.725006 32.303001 64.489006 32.25 64.217003 32.25 c
63.783005 32.25 63.445004 32.389 63.202003 32.664001 c
62.959999 32.941002 62.838001 33.355003 62.838001 33.912003 c
62.838001 36.781002 l
64.213005 36.781002 l
64.213005 34.594002 l
64.213005 34.365002 64.219002 34.18 64.229996 34.035 c
64.242004 33.891003 64.269997 33.77 64.314003 33.669998 c
64.355003 33.578003 64.419006 33.508003 64.506004 33.461002 c
64.593002 33.414001 64.714005 33.391003 64.869995 33.391003 c
64.965004 33.391003 65.078003 33.414001 65.209 33.461002 c
65.339996 33.508003 65.461006 33.572002 65.572006 33.654003 c
65.572006 36.781002 l
66.947006 36.781002 l
66.947006 32.391003 l
f
n
68.166 32.391003 1.375 6.078098 re
f
n
72.418007 32.297001 m
71.860001 32.297001 71.454002 32.412003 71.199005 32.643002 c
70.945 32.871002 70.818001 33.248001 70.818001 33.771 c
70.818001 35.828003 l
70.302002 35.828003 l
70.302002 36.781002 l
70.818001 36.781002 l
70.818001 38.031002 l
72.193001 38.031002 l
72.193001 36.781002 l
73.505005 36.781002 l
73.505005 35.828003 l
72.193001 35.828003 l
72.193001 34.264 l
72.193001 34.109001 72.194 33.975002 72.197006 33.859001 c
72.199005 33.744003 72.220001 33.641003 72.259003 33.549 c
72.295006 33.457001 72.360001 33.385002 72.452003 33.329998 c
72.544006 33.277 72.678001 33.25 72.855003 33.25 c
72.928001 33.25 73.023003 33.268002 73.141006 33.301003 c
73.259003 33.334003 73.342003 33.363003 73.389 33.391003 c
73.505005 33.391003 l
73.505005 32.422001 l
73.357002 32.383003 73.199005 32.354 73.032005 32.329998 c
72.865005 32.309002 72.661003 32.297001 72.418007 32.297001 c
f
n
78.318001 36.781002 m
76.098007 30.781002 l
74.636002 30.781002 l
75.297005 32.48 l
73.677002 36.781002 l
75.113007 36.781002 l
76.045006 34.006001 l
76.918007 36.781002 l
78.318001 36.781002 l
f
n
85.696007 34.584003 m
85.696007 33.861 85.499001 33.291 85.105003 32.875 c
84.709999 32.459003 84.152 32.25 83.431007 32.25 c
82.714005 32.25 82.158005 32.459003 81.761002 32.875 c
81.364006 33.291 81.165001 33.861 81.165001 34.584003 c
81.165001 35.314003 81.364006 35.887001 81.761002 36.301003 c
82.158005 36.715 82.714005 36.922001 83.431007 36.922001 c
84.149002 36.922001 84.706001 36.715 85.102005 36.297001 c
85.498001 35.881001 85.696007 35.311001 85.696007 34.584003 c
h
84.290001 34.576 m
84.290001 34.838001 84.268005 35.055 84.226006 35.229 c
84.183006 35.400002 84.124001 35.539001 84.049004 35.645 c
83.969002 35.754002 83.878006 35.829998 83.777 35.873001 c
83.676003 35.916 83.559998 35.937 83.431007 35.937 c
83.309006 35.937 83.199005 35.918003 83.099998 35.881001 c
83.001007 35.844002 82.911003 35.771 82.828003 35.664001 c
82.75 35.562 82.688004 35.422001 82.641006 35.246002 c
82.595001 35.068001 82.571007 34.846001 82.571007 34.576 c
82.571007 34.309002 82.593002 34.09 82.638 33.926003 c
82.682007 33.759998 82.739006 33.627003 82.809006 33.527 c
82.881004 33.426003 82.972008 33.352001 83.081001 33.305 c
83.189003 33.258003 83.309998 33.234001 83.442001 33.234001 c
83.551003 33.234001 83.662003 33.258003 83.775002 33.305 c
83.888 33.352001 83.977005 33.422001 84.045006 33.516003 c
84.125008 33.629002 84.187004 33.764 84.228004 33.922001 c
84.269997 34.078003 84.290001 34.297001 84.290001 34.576 c
f
n
89.388 37.437 m
89.283005 37.437 l
89.229996 37.453003 89.149002 37.473003 89.039001 37.496002 c
88.929001 37.52 88.824005 37.531002 88.726006 37.531002 c
88.449997 37.531002 88.263 37.48 88.163002 37.381001 c
88.063004 37.279003 88.013 37.092003 88.013 36.816002 c
88.013 36.781002 l
89.091003 36.781002 l
89.091003 35.828003 l
88.059998 35.828003 l
88.059998 32.391003 l
86.685005 32.391003 l
86.685005 35.828003 l
86.138 35.828003 l
86.138 36.781002 l
86.685005 36.781002 l
86.685005 36.902 l
86.685005 37.441002 86.825005 37.844002 87.107002 38.113003 c
87.389008 38.381001 87.815002 38.516003 88.386002 38.516003 c
88.584007 38.516003 88.769997 38.508003 88.942001 38.494003 c
89.114006 38.48 89.263 38.461002 89.388 38.438004 c
89.388 37.437 l
f
n
91.751007 32.391003 m
93.724007 38.203003 l
95.324005 38.203003 l
97.297005 32.391003 l
95.796005 32.391003 l
95.435005 33.563 l
93.563004 33.563 l
93.203003 32.391003 l
91.751007 32.391003 l
h
95.112007 34.625 m
94.499008 36.588001 l
93.887001 34.625 l
95.112007 34.625 l
f
n
100.184006 32.266003 m
99.357002 32.266003 98.723007 32.465 98.283005 32.861 c
97.842003 33.258003 97.622002 33.824001 97.622002 34.559002 c
97.622002 35.277 97.827003 35.852001 98.238007 36.279003 c
98.648003 36.707001 99.223007 36.922001 99.961006 36.922001 c
100.632004 36.922001 101.136002 36.739998 101.474007 36.379002 c
101.812004 36.016003 101.981003 35.496002 101.981003 34.822002 c
101.981003 34.328003 l
98.997002 34.328003 l
99.009995 34.123001 99.052002 33.949001 99.125008 33.811001 c
99.198006 33.672001 99.294006 33.563 99.413002 33.48 c
99.529999 33.398003 99.665009 33.34 99.821007 33.305 c
99.977005 33.268002 100.147003 33.25 100.331001 33.25 c
100.489006 33.25 100.645004 33.268002 100.798004 33.305 c
100.951004 33.34 101.091003 33.387001 101.218002 33.445 c
101.329994 33.496002 101.433006 33.551003 101.527008 33.609001 c
101.622002 33.668003 101.699005 33.721001 101.759003 33.766003 c
101.903008 33.766003 l
101.903008 32.631001 l
101.791008 32.586002 101.689003 32.545002 101.597008 32.508003 c
101.504005 32.469002 101.378006 32.432003 101.217003 32.393002 c
101.068008 32.352001 100.915009 32.322002 100.758003 32.299 c
100.601006 32.277 100.409996 32.266003 100.184006 32.266003 c
h
100.606003 35.156002 m
100.598007 35.447002 100.533005 35.668003 100.409996 35.82 c
100.286003 35.971001 100.098007 36.047001 99.843002 36.047001 c
99.584007 36.047001 99.381004 35.967003 99.235008 35.809002 c
99.089005 35.648003 99.008003 35.432003 98.993004 35.156002 c
100.606003 35.156002 l
f
n
105.797005 35.484001 m
105.685005 35.484001 l
105.633003 35.5 105.559006 35.512001 105.461006 35.52 c
105.363007 35.527 105.254005 35.531002 105.136002 35.531002 c
104.994003 35.531002 104.845001 35.509998 104.689003 35.469002 c
104.533005 35.428001 104.382004 35.379002 104.235008 35.32 c
104.235008 32.391003 l
102.860001 32.391003 l
102.860001 36.781002 l
104.235008 36.781002 l
104.235008 36.139 l
104.296005 36.195004 104.382004 36.268002 104.492004 36.355003 c
104.602005 36.441002 104.701004 36.512001 104.791008 36.563004 c
104.889999 36.623001 105.003006 36.674004 105.134003 36.717003 c
105.264008 36.759998 105.387009 36.781002 105.503006 36.781002 c
105.547005 36.781002 105.596008 36.779003 105.649994 36.777 c
105.705002 36.775002 105.753006 36.771 105.797005 36.766003 c
105.797005 35.484001 l
f
n
110.691002 34.584003 m
110.691002 33.861 110.494003 33.291 110.099998 32.875 c
109.705002 32.459003 109.148003 32.25 108.426003 32.25 c
107.709999 32.25 107.153008 32.459003 106.756004 32.875 c
106.359009 33.291 106.159996 33.861 106.159996 34.584003 c
106.159996 35.314003 106.359009 35.887001 106.756004 36.301003 c
107.153008 36.715 107.709999 36.922001 108.426003 36.922001 c
109.145004 36.922001 109.702003 36.715 110.098007 36.297001 c
110.494003 35.881001 110.691002 35.311001 110.691002 34.584003 c
h
109.285004 34.576 m
109.285004 34.838001 109.264008 35.055 109.221008 35.229 c
109.178001 35.400002 109.119003 35.539001 109.044006 35.645 c
108.964005 35.754002 108.873009 35.829998 108.772003 35.873001 c
108.671005 35.916 108.556007 35.937 108.426003 35.937 c
108.304008 35.937 108.194008 35.918003 108.096008 35.881001 c
107.997002 35.844002 107.906006 35.771 107.823006 35.664001 c
107.745003 35.562 107.683006 35.422001 107.637009 35.246002 c
107.589996 35.068001 107.566002 34.846001 107.566002 34.576 c
107.566002 34.309002 107.589005 34.09 107.633003 33.926003 c
107.677002 33.759998 107.734009 33.627003 107.804008 33.527 c
107.876007 33.426003 107.967003 33.352001 108.076004 33.305 c
108.185005 33.258003 108.306007 33.234001 108.438004 33.234001 c
108.547005 33.234001 108.657005 33.258003 108.769997 33.305 c
108.883003 33.352001 108.973007 33.422001 109.040001 33.516003 c
109.121002 33.629002 109.182007 33.764 109.223007 33.922001 c
109.265007 34.078003 109.285004 34.297001 109.285004 34.576 c
f
n
112.921005 32.266003 m
112.598007 32.266003 112.292007 32.301003 112.003006 32.371002 c
111.715004 32.443001 111.477005 32.525002 111.289009 32.619003 c
111.289009 33.781002 l
111.402008 33.781002 l
111.467003 33.732002 111.541008 33.68 111.624008 33.619003 c
111.707008 33.561001 111.823006 33.498001 111.971008 33.436001 c
112.098007 33.375 112.241005 33.324001 112.401009 33.283001 c
112.561005 33.239998 112.733002 33.219002 112.919998 33.219002 c
113.112007 33.219002 113.282005 33.248001 113.429008 33.307003 c
113.575005 33.363003 113.648003 33.455002 113.648003 33.582001 c
113.648003 33.684002 113.615005 33.759998 113.547005 33.813 c
113.479004 33.865002 113.348007 33.914001 113.153008 33.961002 c
113.049004 33.988003 112.918007 34.016003 112.759003 34.045002 c
112.601006 34.076 112.459999 34.111 112.338005 34.149998 c
111.995003 34.256001 111.737007 34.416 111.564003 34.625 c
111.391006 34.836002 111.305008 35.111 111.305008 35.453003 c
111.305008 35.649998 111.349998 35.834003 111.439995 36.008003 c
111.529999 36.182003 111.663002 36.336002 111.838005 36.473003 c
112.014008 36.605003 112.229996 36.711002 112.488007 36.789001 c
112.745003 36.867001 113.036003 36.906002 113.361008 36.906002 c
113.669006 36.906002 113.953003 36.875 114.212006 36.814003 c
114.471008 36.754002 114.689003 36.68 114.867004 36.594002 c
114.867004 35.484001 l
114.758003 35.484001 l
114.711006 35.52 114.637009 35.566002 114.535004 35.627003 c
114.434006 35.686001 114.335007 35.736 114.238007 35.779003 c
114.124008 35.829998 113.996002 35.871002 113.854004 35.904003 c
113.711006 35.937 113.566002 35.953003 113.418007 35.953003 c
113.220001 35.953003 113.053009 35.919998 112.916008 35.855003 c
112.779007 35.789001 112.711006 35.703003 112.711006 35.594002 c
112.711006 35.496002 112.745003 35.416 112.813004 35.359001 c
112.879997 35.303001 113.027008 35.246002 113.253006 35.191002 c
113.369995 35.162003 113.504005 35.135002 113.657005 35.107002 c
113.809006 35.079998 113.955002 35.043003 114.096008 34.996002 c
114.409996 34.893002 114.648003 34.744003 114.811005 34.547001 c
114.974007 34.349998 115.055008 34.088001 115.055008 33.762001 c
115.055008 33.555 115.006004 33.359001 114.909996 33.172001 c
114.814003 32.986 114.676003 32.828003 114.499008 32.701 c
114.311005 32.563 114.089996 32.455002 113.835007 32.379002 c
113.581009 32.305 113.276009 32.266003 112.921005 32.266003 c
f
n
120.159996 34.645 m
120.159996 33.941002 119.983009 33.375 119.629005 32.943001 c
119.275009 32.514 118.838005 32.297001 118.32 32.297001 c
118.102005 32.297001 117.913002 32.322002 117.752007 32.371002 c
117.591003 32.422001 117.419998 32.498001 117.238007 32.604 c
117.238007 30.781002 l
115.863007 30.781002 l
115.863007 36.781002 l
117.238007 36.781002 l
117.238007 36.326 l
117.438004 36.498001 117.642006 36.639 117.849007 36.746002 c
118.057007 36.854 118.296005 36.906002 118.569008 36.906002 c
119.075005 36.906002 119.466003 36.703003 119.744003 36.299004 c
120.021004 35.895 120.159996 35.342003 120.159996 34.645 c
h
118.754005 34.623001 m
118.754005 35.051003 118.689003 35.361 118.559006 35.555 c
118.429008 35.748001 118.227005 35.844002 117.952003 35.844002 c
117.831009 35.844002 117.709999 35.824001 117.591003 35.785 c
117.471008 35.746002 117.354004 35.688004 117.238007 35.609001 c
117.238007 33.398003 l
117.309998 33.367001 117.389008 33.346001 117.475006 33.332001 c
117.561005 33.318001 117.664009 33.313 117.782005 33.313 c
118.111008 33.313 118.355003 33.422001 118.515007 33.639 c
118.674004 33.857002 118.754005 34.186001 118.754005 34.623001 c
f
n
123.465004 32.855003 m
123.371002 32.777 123.28801 32.707001 123.214005 32.645 c
123.139999 32.582001 123.040001 32.52 122.916008 32.457001 c
122.794006 32.395 122.676003 32.344002 122.561005 32.307003 c
122.445007 32.27 122.284004 32.25 122.076004 32.25 c
121.689995 32.25 121.369003 32.383003 121.113007 32.645 c
120.858009 32.908001 120.729996 33.239998 120.729996 33.641003 c
120.729996 33.969002 120.795006 34.234001 120.925003 34.438004 c
121.054008 34.639 121.241005 34.801003 121.485008 34.918003 c
121.731003 35.039001 122.025009 35.123001 122.368004 35.172001 c
122.709999 35.219002 123.078003 35.256001 123.473007 35.281002 c
123.473007 35.307003 l
123.473007 35.557003 123.384003 35.73 123.207008 35.826 c
123.029999 35.922001 122.765007 35.969002 122.411003 35.969002 c
122.251007 35.969002 122.063004 35.937 121.849007 35.877003 c
121.635002 35.814003 121.426003 35.736 121.222008 35.641003 c
121.105003 35.641003 l
121.105003 36.703003 l
121.241005 36.742001 121.459007 36.789001 121.761009 36.842003 c
122.063004 36.895 122.367004 36.922001 122.674004 36.922001 c
123.428009 36.922001 123.978004 36.797001 124.323006 36.543003 c
124.668007 36.291 124.839996 35.906002 124.839996 35.389 c
124.839996 32.391003 l
123.465004 32.391003 l
123.465004 32.855003 l
h
123.465004 33.521 m
123.465004 34.453003 l
123.233009 34.43 123.046005 34.408001 122.904007 34.393002 c
122.761009 34.375 122.621002 34.34 122.483009 34.291 c
122.364006 34.248001 122.271004 34.184002 122.205009 34.098003 c
122.138008 34.012001 122.105003 33.896 122.105003 33.752003 c
122.105003 33.543003 122.161003 33.398003 122.271004 33.32 c
122.381004 33.242001 122.544006 33.203003 122.759995 33.203003 c
122.879005 33.203003 123.001007 33.23 123.126007 33.287003 c
123.251007 33.342003 123.363007 33.422001 123.465004 33.521 c
f
n
128.152008 32.266003 m
127.790001 32.266003 127.458008 32.313 127.158005 32.402 c
126.857002 32.494003 126.596008 32.635002 126.374008 32.826 c
126.156006 33.018002 125.985008 33.258003 125.863007 33.545002 c
125.739998 33.834003 125.679008 34.174 125.679008 34.566002 c
125.679008 34.986 125.746002 35.346001 125.878006 35.641003 c
126.011009 35.936001 126.19101 36.18 126.417007 36.369003 c
126.636009 36.553001 126.893005 36.687 127.189003 36.775002 c
127.484009 36.863003 127.792007 36.906002 128.113007 36.906002 c
128.355011 36.906002 128.597 36.879002 128.839005 36.822002 c
129.081009 36.768002 129.325012 36.678001 129.569992 36.557003 c
129.569992 35.391003 l
129.395004 35.391003 l
129.339996 35.441002 129.27301 35.498001 129.193008 35.561001 c
129.114014 35.621002 129.028 35.678001 128.934006 35.73 c
128.835007 35.783001 128.723999 35.829998 128.598999 35.867001 c
128.473999 35.904003 128.335007 35.922001 128.182007 35.922001 c
127.833008 35.922001 127.563004 35.799004 127.372009 35.555 c
127.181007 35.311001 127.085007 34.98 127.085007 34.566002 c
127.085007 34.123001 127.188004 33.793003 127.392006 33.576 c
127.596008 33.359001 127.867004 33.25 128.205002 33.25 c
128.376007 33.25 128.527008 33.27 128.657013 33.309002 c
128.787003 33.349998 128.899002 33.396 128.993011 33.451 c
129.083008 33.506001 129.162003 33.563 129.227005 33.623001 c
129.291 33.682003 129.348007 33.734001 129.395004 33.781002 c
129.569992 33.781002 l
129.569992 32.607002 l
129.492004 32.572002 129.401001 32.533001 129.298004 32.488003 c
129.195007 32.445 129.091003 32.408001 128.984009 32.379002 c
128.851013 32.344002 128.727005 32.314003 128.611008 32.295002 c
128.49501 32.275002 128.34201 32.266003 128.152008 32.266003 c
f
n
132.619995 32.266003 m
131.792999 32.266003 131.159012 32.465 130.719009 32.861 c
130.278 33.258003 130.057999 33.824001 130.057999 34.559002 c
130.057999 35.277 130.263 35.852001 130.674011 36.279003 c
131.084 36.707001 131.659012 36.922001 132.39801 36.922001 c
133.068008 36.922001 133.572006 36.739998 133.910004 36.379002 c
134.248001 36.016003 134.417007 35.496002 134.417007 34.822002 c
134.417007 34.328003 l
131.432999 34.328003 l
131.445999 34.123001 131.489014 33.949001 131.562012 33.811001 c
131.634003 33.672001 131.729996 33.563 131.848999 33.48 c
131.966003 33.398003 132.102005 33.34 132.258011 33.305 c
132.414001 33.268002 132.583008 33.25 132.768005 33.25 c
132.92601 33.25 133.081009 33.268002 133.234009 33.305 c
133.387009 33.34 133.527008 33.387001 133.654007 33.445 c
133.766006 33.496002 133.869003 33.551003 133.964005 33.609001 c
134.059006 33.668003 134.136002 33.721001 134.195007 33.766003 c
134.339005 33.766003 l
134.339005 32.631001 l
134.228012 32.586002 134.125 32.545002 134.033005 32.508003 c
133.94101 32.469002 133.814011 32.432003 133.653 32.393002 c
133.505005 32.352001 133.352005 32.322002 133.195007 32.299 c
133.03801 32.277 132.846008 32.266003 132.619995 32.266003 c
h
133.042007 35.156002 m
133.035004 35.447002 132.969009 35.668003 132.846008 35.82 c
132.723007 35.971001 132.534012 36.047001 132.279999 36.047001 c
132.020004 36.047001 131.817001 35.967003 131.671005 35.809002 c
131.525009 35.648003 131.444 35.432003 131.429001 35.156002 c
133.042007 35.156002 l
f
n
137.878006 32.391003 m
137.878006 38.203003 l
141.800003 38.203003 l
141.800003 37.109001 l
139.347 37.109001 l
139.347 36.078003 l
141.612 36.078003 l
141.612 34.984001 l
139.347 34.984001 l
139.347 33.484001 l
141.800003 33.484001 l
141.800003 32.391003 l
137.878006 32.391003 l
f
n
146.991013 32.391003 m
145.616013 32.391003 l
145.616013 34.568001 l
145.616013 34.746002 145.609009 34.924 145.595001 35.100002 c
145.581009 35.275002 145.554001 35.404003 145.514999 35.488003 c
145.469009 35.588001 145.401001 35.658001 145.313004 35.701 c
145.225006 35.744003 145.10701 35.766003 144.959991 35.766003 c
144.849014 35.766003 144.735001 35.744003 144.622009 35.703003 c
144.508011 35.662003 144.386002 35.596001 144.257004 35.504002 c
144.257004 32.391003 l
142.882004 32.391003 l
142.882004 36.781002 l
144.257004 36.781002 l
144.257004 36.301003 l
144.479996 36.489998 144.697006 36.639 144.909012 36.746002 c
145.121002 36.854 145.355011 36.906002 145.612 36.906002 c
146.059006 36.906002 146.400009 36.766003 146.637009 36.482002 c
146.873001 36.199001 146.991013 35.789001 146.991013 35.252003 c
146.991013 32.391003 l
f
n
152.132004 32.895 m
152.132004 32.486 152.073013 32.141003 151.956009 31.857002 c
151.839005 31.572002 151.679001 31.352001 151.476013 31.191002 c
151.272003 31.031002 151.029007 30.914001 150.74501 30.842001 c
150.461014 30.771002 150.146011 30.734001 149.800003 30.734001 c
149.508011 30.734001 149.231003 30.754002 148.970001 30.791002 c
148.708008 30.828001 148.479996 30.873001 148.28801 30.922001 c
148.28801 32.016003 l
148.448013 32.016003 l
148.515015 31.99 148.595001 31.963001 148.687012 31.932001 c
148.779007 31.9 148.872009 31.873001 148.965012 31.846001 c
149.077011 31.818001 149.186005 31.795002 149.292007 31.777002 c
149.399002 31.76 149.508011 31.75 149.619995 31.75 c
149.851013 31.75 150.043015 31.775002 150.198013 31.822002 c
150.352005 31.871002 150.468002 31.939001 150.546005 32.029003 c
150.624008 32.121002 150.679001 32.229 150.709991 32.354 c
150.741013 32.477001 150.757004 32.633003 150.757004 32.82 c
150.757004 32.902 l
150.603012 32.768002 150.427002 32.658001 150.226013 32.576 c
150.024002 32.494003 149.818008 32.453003 149.605011 32.453003 c
149.039993 32.453003 148.603012 32.639 148.296005 33.009998 c
147.988007 33.379002 147.835007 33.943001 147.835007 34.699001 c
147.835007 35.043003 147.882004 35.354 147.977005 35.627003 c
148.071014 35.900002 148.203003 36.135002 148.372009 36.328003 c
148.532013 36.512001 148.727005 36.656002 148.955002 36.756001 c
149.184006 36.855003 149.421005 36.906002 149.667007 36.906002 c
149.889999 36.906002 150.089996 36.877003 150.267014 36.818001 c
150.443008 36.759998 150.603012 36.682003 150.749008 36.586002 c
150.800003 36.781002 l
152.132004 36.781002 l
152.132004 32.895 l
h
150.757004 33.762001 m
150.757004 35.779003 l
150.690002 35.813004 150.60701 35.838001 150.509995 35.859001 c
150.412003 35.881001 150.314011 35.891003 150.21701 35.891003 c
149.893005 35.891003 149.649002 35.783001 149.486008 35.568001 c
149.323013 35.352001 149.241013 35.051003 149.241013 34.666 c
149.241013 34.473003 149.253006 34.309002 149.278 34.176003 c
149.302002 34.043003 149.348007 33.924 149.415009 33.822002 c
149.479004 33.721001 149.563004 33.645 149.667007 33.594002 c
149.771011 33.541 149.904007 33.516003 150.06601 33.516003 c
150.187012 33.516003 150.306 33.537003 150.423004 33.579998 c
150.539993 33.621002 150.651001 33.682003 150.757004 33.762001 c
f
n
154.764008 37.406002 m
154.764008 37.406002 -1.453201 1.0625 re
154.733002 32.391003 m
154.733002 32.391003 -1.375 4.390598 re
f
n
160.041 32.391003 m
158.667007 32.391003 l
158.667007 34.568001 l
158.667007 34.746002 158.659012 34.924 158.645004 35.100002 c
158.631012 35.275002 158.604004 35.404003 158.565002 35.488003 c
158.519012 35.588001 158.452011 35.658001 158.364014 35.701 c
158.275009 35.744003 158.158005 35.766003 158.009995 35.766003 c
157.899002 35.766003 157.786011 35.744003 157.672012 35.703003 c
157.558014 35.662003 157.437012 35.596001 157.307007 35.504002 c
157.307007 32.391003 l
155.932007 32.391003 l
155.932007 36.781002 l
157.307007 36.781002 l
157.307007 36.301003 l
157.529999 36.489998 157.748001 36.639 157.959015 36.746002 c
158.171005 36.854 158.406006 36.906002 158.66301 36.906002 c
159.109009 36.906002 159.451004 36.766003 159.687012 36.482002 c
159.923004 36.199001 160.041 35.789001 160.041 35.252003 c
160.041 32.391003 l
f
n
163.447006 32.266003 m
162.619995 32.266003 161.986008 32.465 161.546005 32.861 c
161.105011 33.258003 160.88501 33.824001 160.88501 34.559002 c
160.88501 35.277 161.089996 35.852001 161.501007 36.279003 c
161.912003 36.707001 162.486008 36.922001 163.225006 36.922001 c
163.895004 36.922001 164.399002 36.739998 164.737015 36.379002 c
165.075012 36.016003 165.24501 35.496002 165.24501 34.822002 c
165.24501 34.328003 l
162.259995 34.328003 l
162.27301 34.123001 162.31601 33.949001 162.389008 33.811001 c
162.461014 33.672001 162.557007 33.563 162.67601 33.48 c
162.793015 33.398003 162.929001 33.34 163.085007 33.305 c
163.241013 33.268002 163.411011 33.25 163.595001 33.25 c
163.753006 33.25 163.908005 33.268002 164.062012 33.305 c
164.214005 33.34 164.355011 33.387001 164.481003 33.445 c
164.593002 33.496002 164.696014 33.551003 164.791 33.609001 c
164.886002 33.668003 164.963013 33.721001 165.02301 33.766003 c
165.167007 33.766003 l
165.167007 32.631001 l
165.055008 32.586002 164.953003 32.545002 164.860001 32.508003 c
164.768005 32.469002 164.641006 32.432003 164.479996 32.393002 c
164.332001 32.352001 164.179001 32.322002 164.022003 32.299 c
163.865005 32.277 163.673004 32.266003 163.447006 32.266003 c
h
163.869995 35.156002 m
163.862015 35.447002 163.796005 35.668003 163.673004 35.82 c
163.550003 35.971001 163.361008 36.047001 163.10701 36.047001 c
162.847 36.047001 162.644012 35.967003 162.499008 35.809002 c
162.352005 35.648003 162.271011 35.432003 162.256012 35.156002 c
163.869995 35.156002 l
f
n
168.35701 32.266003 m
167.529999 32.266003 166.896011 32.465 166.456009 32.861 c
166.015015 33.258003 165.795013 33.824001 165.795013 34.559002 c
165.795013 35.277 166.0 35.852001 166.411011 36.279003 c
166.822006 36.707001 167.396011 36.922001 168.13501 36.922001 c
168.805008 36.922001 169.309998 36.739998 169.647003 36.379002 c
169.985001 36.016003 170.154007 35.496002 170.154007 34.822002 c
170.154007 34.328003 l
167.169998 34.328003 l
167.183014 34.123001 167.226013 33.949001 167.298004 33.811001 c
167.371002 33.672001 167.46701 33.563 167.586014 33.48 c
167.703003 33.398003 167.839005 33.34 167.99501 33.305 c
168.149994 33.268002 168.319992 33.25 168.504013 33.25 c
168.66301 33.25 168.818008 33.268002 168.971008 33.305 c
169.124008 33.34 169.264008 33.387001 169.392014 33.445 c
169.503006 33.496002 169.606003 33.551003 169.701004 33.609001 c
169.795013 33.668003 169.873001 33.721001 169.932007 33.766003 c
170.076004 33.766003 l
170.076004 32.631001 l
169.964005 32.586002 169.862015 32.545002 169.769989 32.508003 c
169.678009 32.469002 169.55101 32.432003 169.389999 32.393002 c
169.242004 32.352001 169.089005 32.322002 168.932007 32.299 c
168.774002 32.277 168.583008 32.266003 168.35701 32.266003 c
h
168.779007 35.156002 m
168.771011 35.447002 168.706009 35.668003 168.583008 35.82 c
168.459015 35.971001 168.271011 36.047001 168.017014 36.047001 c
167.757004 36.047001 167.554001 35.967003 167.408005 35.809002 c
167.262009 35.648003 167.181015 35.432003 167.166 35.156002 c
168.779007 35.156002 l
f
n
173.971008 35.484001 m
173.859009 35.484001 l
173.807007 35.5 173.73201 35.512001 173.634003 35.52 c
173.536011 35.527 173.428009 35.531002 173.309998 35.531002 c
173.167007 35.531002 173.018005 35.509998 172.863007 35.469002 c
172.706009 35.428001 172.555008 35.379002 172.408005 35.32 c
172.408005 32.391003 l
171.033005 32.391003 l
171.033005 36.781002 l
172.408005 36.781002 l
172.408005 36.139 l
172.470001 36.195004 172.556015 36.268002 172.665009 36.355003 c
172.775009 36.441002 172.875015 36.512001 172.965012 36.563004 c
173.063004 36.623001 173.177002 36.674004 173.308014 36.717003 c
173.437012 36.759998 173.559998 36.781002 173.677002 36.781002 c
173.721008 36.781002 173.769989 36.779003 173.824005 36.777 c
173.878006 36.775002 173.927002 36.771 173.971008 36.766003 c
173.971008 35.484001 l
f
n
176.068008 38.469002 m
176.068008 38.469002 -1.453201 -1.0625 re
176.037003 36.781002 m
176.037003 36.781002 -1.375 -4.390598 re
f
n
181.346008 32.391003 m
179.971008 32.391003 l
179.971008 34.568001 l
179.971008 34.746002 179.963013 34.924 179.949005 35.100002 c
179.935013 35.275002 179.908005 35.404003 179.869003 35.488003 c
179.823013 35.588001 179.755005 35.658001 179.667007 35.701 c
179.57901 35.744003 179.461014 35.766003 179.314011 35.766003 c
179.203003 35.766003 179.089996 35.744003 178.976013 35.703003 c
178.862015 35.662003 178.73999 35.596001 178.611008 35.504002 c
178.611008 32.391003 l
177.236008 32.391003 l
177.236008 36.781002 l
178.611008 36.781002 l
178.611008 36.301003 l
178.834015 36.489998 179.052002 36.639 179.264008 36.746002 c
179.475006 36.854 179.709991 36.906002 179.96701 36.906002 c
180.41301 36.906002 180.755005 36.766003 180.991013 36.482002 c
181.228012 36.199001 181.346008 35.789001 181.346008 35.252003 c
181.346008 32.391003 l
f
n
186.486008 32.895 m
186.486008 32.486 186.427002 32.141003 186.309998 31.857002 c
186.193008 31.572002 186.033005 31.352001 185.830002 31.191002 c
185.626007 31.031002 185.383011 30.914001 185.099014 30.842001 c
184.815002 30.771002 184.5 30.734001 184.154007 30.734001 c
183.862015 30.734001 183.585007 30.754002 183.324005 30.791002 c
183.062012 30.828001 182.835007 30.873001 182.642014 30.922001 c
182.642014 32.016003 l
182.802002 32.016003 l
182.869003 31.99 182.949005 31.963001 183.042007 31.932001 c
183.133011 31.9 183.226013 31.873001 183.319992 31.846001 c
183.431015 31.818001 183.539993 31.795002 183.647003 31.777002 c
183.753006 31.76 183.862015 31.75 183.974014 31.75 c
184.205002 31.75 184.397003 31.775002 184.552002 31.822002 c
184.707016 31.871002 184.823013 31.939001 184.901016 32.029003 c
184.978012 32.121002 185.033005 32.229 185.064011 32.354 c
185.095001 32.477001 185.111008 32.633003 185.111008 32.82 c
185.111008 32.902 l
184.958008 32.768002 184.781006 32.658001 184.580002 32.576 c
184.379013 32.494003 184.172012 32.453003 183.959015 32.453003 c
183.394012 32.453003 182.957016 32.639 182.649994 33.009998 c
182.343002 33.379002 182.189011 33.943001 182.189011 34.699001 c
182.189011 35.043003 182.236008 35.354 182.331009 35.627003 c
182.42601 35.900002 182.557007 36.135002 182.726013 36.328003 c
182.887009 36.512001 183.081009 36.656002 183.309998 36.756001 c
183.53801 36.855003 183.775009 36.906002 184.021011 36.906002 c
184.24501 36.906002 184.444016 36.877003 184.621002 36.818001 c
184.797012 36.759998 184.958008 36.682003 185.103012 36.586002 c
185.154007 36.781002 l
186.486008 36.781002 l
186.486008 32.895 l
h
185.111008 33.762001 m
185.111008 35.779003 l
185.044006 35.813004 184.962006 35.838001 184.864014 35.859001 c
184.767014 35.881001 184.668015 35.891003 184.571014 35.891003 c
184.247009 35.891003 184.003006 35.783001 183.839996 35.568001 c
183.677002 35.352001 183.595001 35.051003 183.595001 34.666 c
183.595001 34.473003 183.60701 34.309002 183.632004 34.176003 c
183.656006 34.043003 183.702011 33.924 183.769012 33.822002 c
183.833008 33.721001 183.918015 33.645 184.021011 33.594002 c
184.126007 33.541 184.258011 33.516003 184.419998 33.516003 c
184.542007 33.516003 184.659988 33.537003 184.777008 33.579998 c
184.894012 33.621002 185.005005 33.682003 185.111008 33.762001 c
f
0.719 w
4.0 M
2.0 setflat
n
612.28302 107.354004 m
0.0 107.354004 l
false setoverprint
1.0 1.0 1.0  setrgbcolor
q
f
Q
0.13725 0.12157 0.12549  setrgbcolor
S
n
0.059998 19.682001 612.252014 0.709 re
1.0 1.0 1.0  setrgbcolor
f
1.0 setflat
n
426.859985 80.393005 m
426.859985 65.536003 l
426.761017 62.476002 425.164032 60.548004 422.041016 60.548004 c
418.916016 60.548004 417.319977 62.476002 417.220001 65.536003 c
417.220001 80.393005 l
410.572021 80.393005 l
410.572021 65.202003 l
410.639008 58.521004 415.98999 55.895004 422.041016 55.895004 c
428.089996 55.895004 433.44101 58.521004 433.508026 65.202003 c
433.508026 80.393005 l
426.859985 80.393005 l
0.0 0.68235 0.93725  setrgbcolor
f
n
443.484009 77.536003 m
448.338013 77.536003 l
451.696014 77.536003 453.489014 76.171005 454.423035 74.809006 c
455.851013 72.747002 456.249023 70.619995 456.249023 68.393005 c
456.249023 66.167 455.851013 64.039001 454.423035 61.978004 c
453.489014 60.615002 451.696014 59.251003 448.338013 59.251003 c
443.484009 59.251003 l
443.484009 77.536003 l
h
440.15802 56.395004 m
448.139008 56.395004 l
450.365021 56.459003 452.726013 56.627003 454.653015 57.855003 c
458.146027 60.084003 459.739014 63.84 459.739014 68.393005 c
459.739014 72.948006 458.146027 76.704002 454.653015 78.931007 c
452.726013 80.161003 450.365021 80.327003 448.139008 80.393005 c
440.15802 80.393005 l
440.15802 56.395004 l
true setoverprint
0.13725 0.12157 0.12549  setrgbcolor
eofill
n
477.884033 64.139 m
477.884033 65.702003 l
477.884033 70.321007 475.524017 73.479004 470.538025 73.580002 c
465.253021 73.580002 462.792023 69.491005 462.792023 64.604004 c
462.792023 59.683002 464.921021 55.895004 470.272034 55.895004 c
474.261017 55.895004 477.186035 57.789001 477.685028 61.579998 c
474.36203 61.579998 l
473.995026 59.152004 472.767029 58.187004 470.30603 58.187004 c
467.081024 58.187004 465.886017 61.214005 466.116028 64.139 c
477.884033 64.139 l
h
466.116028 66.333 m
466.116028 69.057007 467.679016 71.285004 470.30603 71.285004 c
473.364014 71.285004 474.628021 69.124001 474.559998 66.333 c
466.116028 66.333 l
eofill
n
481.716034 56.395004 3.158112 23.999001 re
f
n
494.845032 56.395004 m
494.845032 70.885002 l
498.700012 70.885002 l
498.700012 73.081001 l
494.845032 73.081001 l
494.845032 75.739006 l
494.745026 77.569 495.776031 78.034004 497.571014 78.034004 c
498.103027 78.034004 498.636017 77.967003 499.167023 77.933006 c
499.167023 80.559006 l
498.401031 80.693001 497.671021 80.893005 496.905029 80.893005 c
494.548035 80.893005 491.786011 79.928001 491.686035 76.272003 c
491.686035 73.081001 l
488.43103 73.081001 l
488.43103 70.885002 l
491.686035 70.885002 l
491.686035 56.395004 l
494.845032 56.395004 l
f
n
500.517029 73.083 m
500.517029 70.889 l
503.374023 70.889 l
503.374023 60.25 l
503.374023 58.021004 503.542023 57.955002 504.106018 57.158001 c
504.639984 56.428001 505.470001 56.162003 505.968018 56.061001 c
506.733032 55.928001 507.331024 55.895004 508.097015 55.895004 c
508.827026 55.895004 509.524017 56.061001 510.257019 56.094002 c
510.257019 58.521004 l
509.757019 58.386002 509.093018 58.322002 508.593018 58.322002 c
507.462036 58.322002 506.534027 58.886002 506.534027 60.084003 c
506.534027 70.889 l
510.388031 70.889 l
510.388031 73.083 l
506.534027 73.081001 l
506.534027 77.635002 l
503.374023 76.637001 l
503.374023 73.081001 l
500.517029 73.083 l
f
n
393.248016 56.393002 m
399.897034 56.393002 l
399.897034 75.737007 l
407.410004 75.737007 l
407.410004 80.391006 l
385.902008 80.391006 l
385.902008 75.737007 l
393.248016 75.737007 l
393.248016 56.393002 l
f
n
409.31601 92.068001 m
407.695007 91.565002 406.022034 91.965004 406.025024 94.133003 c
406.031006 97.439995 413.79303 100.209007 414.869019 103.099998 c
415.137024 103.819008 415.152008 104.412003 414.809021 104.393005 c
414.561005 104.379005 414.756012 104.019005 414.211029 103.474007 c
410.994019 100.256004 405.606018 100.262001 401.472015 98.409004 c
398.763031 97.196007 390.81601 93.454002 392.646027 85.116005 c
392.732025 84.719002 392.970001 83.393005 393.211029 83.393005 c
393.496033 83.393005 393.492004 84.181007 393.481018 85.137001 c
393.422028 90.104004 399.303009 91.489998 401.215027 94.733002 c
401.444031 95.122002 401.841034 95.665001 401.934021 95.413002 c
401.978027 95.291008 401.949005 95.110001 401.873016 94.766006 c
401.27301 92.098007 398.486023 90.388 399.275024 88.481003 c
400.299011 86.008003 403.256012 87.854004 404.162018 89.444008 c
404.406006 89.881004 404.54303 90.159004 404.705017 90.104004 c
404.828033 90.063004 404.824005 89.561005 404.748016 89.108002 c
404.262024 86.237007 403.60202 84.627007 401.502014 82.993004 c
400.829987 82.471001 399.77301 82.362007 399.912018 81.959999 c
399.947021 81.856003 400.403015 81.868004 400.766022 81.903008 c
406.359009 82.262001 411.03302 88.855003 412.27301 93.163002 c
412.404022 93.465004 412.44101 93.751007 412.30603 93.854004 c
412.13501 93.987007 411.891022 93.686005 411.641022 93.467003 c
411.003021 92.907005 410.125031 92.32 409.31601 92.068001 c
f
n
385.902008 38.471001 m
385.902008 38.32 385.902008 32.543003 385.902008 32.391003 c
386.041016 32.391003 387.693024 32.391003 387.693024 32.391003 c
388.100006 32.391003 388.486023 32.422001 388.844025 32.48 c
389.196014 32.539001 389.527008 32.672001 389.826019 32.873001 c
390.186005 33.111 390.486023 33.457001 390.723022 33.902 c
390.958008 34.348003 391.077026 34.859001 391.077026 35.426003 c
391.077026 36.012001 390.966003 36.529003 390.746033 36.961002 c
390.525024 37.393002 390.223022 37.739998 389.843018 37.992001 c
389.53302 38.201 389.196014 38.334003 388.844025 38.389 c
388.482025 38.443001 388.089996 38.471001 387.678009 38.471001 c
387.678009 38.471001 386.041016 38.471001 385.902008 38.471001 c
h
387.252014 33.488003 m
387.252014 37.451 l
387.354004 37.451 l
387.663025 37.451 387.932007 37.447002 388.154022 37.436001 c
388.387024 37.424004 388.611023 37.355003 388.823029 37.234001 c
389.115021 37.062 389.334015 36.822002 389.475006 36.518002 c
389.613007 36.219002 389.684021 35.854 389.684021 35.436001 c
389.684021 35.018002 389.617004 34.656002 389.485016 34.363003 c
389.35202 34.068001 389.154022 33.834003 388.89801 33.664001 c
388.682007 33.521 388.448029 33.441002 388.206024 33.43 c
387.979004 33.416 387.69101 33.41 387.354004 33.41 c
387.252014 33.41 l
387.252014 33.488003 l
false setoverprint
1.0 1.0 1.0  setrgbcolor
f
n
392.627014 36.248001 m
392.221008 35.826 392.015015 35.252003 392.015015 34.541 c
392.015015 33.814003 392.234009 33.25 392.669006 32.859001 c
393.105011 32.469002 393.746033 32.27 394.572021 32.27 c
394.800018 32.27 394.994019 32.281002 395.152008 32.303001 c
395.309021 32.326 395.465027 32.357002 395.614014 32.396 c
395.777008 32.436001 395.904022 32.475002 395.996033 32.512001 c
395.996033 32.512001 396.195007 32.592003 396.264008 32.619003 c
396.264008 32.705002 396.264008 33.527 396.264008 33.652 c
396.238007 33.652 396.226013 33.652 396.213013 33.652 c
396.176025 33.627003 395.98999 33.504002 395.98999 33.504002 c
395.891022 33.441002 395.779999 33.385002 395.663025 33.329998 c
395.528015 33.27 395.377014 33.219002 395.215027 33.182003 c
395.053009 33.143002 394.88501 33.123001 394.71701 33.123001 c
394.521027 33.123001 394.33902 33.143002 394.174011 33.18 c
394.004028 33.219002 393.854004 33.283001 393.72702 33.371002 c
393.594025 33.461002 393.486023 33.584003 393.406006 33.736 c
393.326019 33.887001 393.279022 34.076 393.266022 34.297001 c
393.259979 34.375 l
393.259979 34.375 396.197021 34.375 396.341034 34.375 c
396.341034 34.484001 396.341034 34.807003 396.341034 34.807003 c
396.341034 35.475002 396.172028 35.994003 395.839996 36.349998 c
395.509979 36.703003 395.006012 36.883003 394.34201 36.883003 c
393.608032 36.883003 393.031006 36.669998 392.627014 36.248001 c
h
394.232025 36.141003 m
394.52301 36.141003 394.744019 36.053001 394.888031 35.879002 c
395.028015 35.711002 395.104004 35.465 395.11203 35.152 c
395.115021 35.074001 l
393.256012 35.074001 l
393.261017 35.154003 l
393.277008 35.453003 393.371033 35.693001 393.537018 35.871002 c
393.705017 36.049004 393.939026 36.141003 394.232025 36.141003 c
f
n
397.492004 38.471001 m
397.492004 38.326 397.492004 32.535 397.492004 32.391003 c
397.619019 32.391003 398.616028 32.391003 398.742004 32.391003 c
398.742004 32.535 398.742004 38.326 398.742004 38.471001 c
398.616028 38.471001 397.619019 38.471001 397.492004 38.471001 c
f
n
400.69101 38.123001 m
400.419983 37.863003 400.281006 37.465 400.281006 36.939003 c
400.281006 36.739998 l
400.281006 36.739998 399.832031 36.739998 399.720001 36.739998 c
399.720001 36.623001 399.720001 36.025002 399.720001 35.908001 c
399.832031 35.908001 400.281006 35.908001 400.281006 35.908001 c
400.281006 35.908001 400.281006 32.535 400.281006 32.391003 c
400.40802 32.391003 401.405029 32.391003 401.531006 32.391003 c
401.531006 32.535 401.531006 35.908001 401.531006 35.908001 c
401.531006 35.908001 402.472015 35.908001 402.60202 35.908001 c
402.60202 36.025002 402.60202 36.623001 402.60202 36.739998 c
402.471008 36.739998 401.488007 36.739998 401.488007 36.739998 c
401.488007 36.849998 l
401.488007 37.158001 401.545013 37.365002 401.664032 37.484001 c
401.782013 37.604 401.988007 37.66 402.295013 37.66 c
402.399994 37.66 402.514008 37.648003 402.633026 37.621002 c
402.633026 37.621002 402.824005 37.574001 402.875031 37.563004 c
402.879028 37.563004 402.889008 37.563004 402.89801 37.563004 c
402.89801 37.682003 402.89801 38.34 402.89801 38.445004 c
402.787018 38.463001 402.659027 38.48 402.512024 38.492001 c
402.338013 38.508003 402.14801 38.514 401.949005 38.514 c
401.387024 38.514 400.96402 38.383003 400.69101 38.123001 c
f
n
403.657013 38.029003 m
403.657013 37.896 403.657013 36.739998 403.657013 36.739998 c
403.657013 36.739998 403.229004 36.739998 403.117004 36.739998 c
403.117004 36.623001 403.117004 36.025002 403.117004 35.908001 c
403.229004 35.908001 403.657013 35.908001 403.657013 35.908001 c
403.657013 33.732002 l
403.657013 33.225002 403.781006 32.855003 404.02301 32.637001 c
404.269012 32.416 404.672028 32.303001 405.223022 32.303001 c
405.46701 32.303001 405.676025 32.314003 405.844025 32.336002 c
405.98999 32.355003 406.130005 32.385002 406.264008 32.418003 c
406.264008 32.518002 406.264008 33.146 406.264008 33.268002 c
406.248016 33.268002 406.238007 33.268002 406.231018 33.268002 c
406.176025 33.239998 406.097015 33.213001 405.97998 33.184002 c
405.85202 33.149998 405.749023 33.135002 405.666016 33.135002 c
405.469025 33.135002 405.319977 33.164001 405.213013 33.227001 c
405.104034 33.289001 405.025024 33.377003 404.981018 33.486 c
404.937012 33.586002 404.914032 33.701 404.912018 33.828003 c
404.907013 34.242001 l
404.907013 35.908001 l
404.907013 35.908001 406.129028 35.908001 406.264008 35.908001 c
406.264008 36.025002 406.264008 36.623001 406.264008 36.739998 c
406.129028 36.739998 404.907013 36.739998 404.907013 36.739998 c
404.907013 36.739998 404.907013 37.896 404.907013 38.029003 c
404.781006 38.029003 403.784027 38.029003 403.657013 38.029003 c
f
n
413.410004 38.471001 m
413.410004 38.326 413.410004 34.553001 413.410004 34.553001 c
413.410004 34.105003 413.322021 33.773003 413.14801 33.564003 c
412.973022 33.352001 412.697021 33.244003 412.32901 33.244003 c
411.952026 33.244003 411.675018 33.357002 411.504028 33.578003 c
411.338013 33.795002 411.253021 34.121002 411.253021 34.553001 c
411.253021 34.553001 411.253021 38.326 411.253021 38.471001 c
411.125031 38.471001 410.032013 38.471001 409.904022 38.471001 c
409.904022 38.326 409.904022 34.473003 409.904022 34.473003 c
409.904022 33.754002 410.113007 33.201 410.527008 32.832001 c
410.943024 32.459003 411.549011 32.27 412.32901 32.27 c
413.133026 32.27 413.745026 32.463001 414.149994 32.84 c
414.555023 33.217003 414.759033 33.768002 414.759033 34.477001 c
414.759033 34.477001 414.759033 38.326 414.759033 38.471001 c
414.631012 38.471001 413.537018 38.471001 413.410004 38.471001 c
f
n
418.219025 36.705002 m
418.008026 36.598003 417.787018 36.447002 417.563019 36.258003 c
417.439026 36.152 l
417.439026 36.152 417.439026 36.631001 417.439026 36.739998 c
417.312012 36.739998 416.31601 36.739998 416.189026 36.739998 c
416.189026 36.598003 416.189026 32.533001 416.189026 32.391003 c
416.31601 32.391003 417.312012 32.391003 417.439026 32.391003 c
417.439026 32.535 417.439026 35.539001 417.439026 35.539001 c
417.471008 35.561001 l
417.609985 35.658001 417.744019 35.729 417.867035 35.773003 c
417.993011 35.818001 418.119995 35.842003 418.244019 35.842003 c
418.40802 35.842003 418.542023 35.816002 418.643005 35.77 c
418.75 35.717003 418.832031 35.633003 418.888031 35.516003 c
418.933014 35.419998 418.962006 35.281002 418.978027 35.092003 c
418.992035 34.91 419.0 34.727001 419.0 34.543003 c
419.0 34.543003 419.0 32.531002 419.0 32.391003 c
419.127014 32.391003 420.123016 32.391003 420.25 32.391003 c
420.25 32.533001 420.25 35.242001 420.25 35.242001 c
420.25 35.771 420.134033 36.178001 419.903015 36.453003 c
419.676025 36.723003 419.34201 36.861 418.90802 36.861 c
418.656006 36.861 418.425018 36.809002 418.219025 36.705002 c
f
n
421.657013 38.471001 m
421.657013 38.349998 421.657013 37.648003 421.657013 37.529003 c
421.785034 37.529003 422.856018 37.529003 422.984009 37.529003 c
422.984009 37.648003 422.984009 38.349998 422.984009 38.471001 c
422.856018 38.471001 421.785034 38.471001 421.657013 38.471001 c
h
421.701019 36.739998 m
421.701019 36.598003 421.701019 32.533001 421.701019 32.391003 c
421.828033 32.391003 422.824005 32.391003 422.951019 32.391003 c
422.951019 32.533001 422.951019 36.598003 422.951019 36.739998 c
422.824005 36.739998 421.828033 36.739998 421.701019 36.739998 c
f
n
427.162018 36.739998 m
427.131012 36.637001 426.208008 33.609001 426.208008 33.609001 c
426.208008 33.609001 425.269012 36.637001 425.238007 36.739998 c
425.143005 36.739998 424.089996 36.739998 423.913025 36.739998 c
423.97998 36.551003 425.426025 32.486 425.459991 32.391003 c
425.555023 32.391003 426.787018 32.391003 426.883026 32.391003 c
426.916016 32.486 428.373016 36.551003 428.44101 36.739998 c
428.266022 36.739998 427.258026 36.739998 427.162018 36.739998 c
f
n
429.695007 36.248001 m
429.289032 35.826 429.084015 35.252003 429.084015 34.541 c
429.084015 33.814003 429.304016 33.25 429.73703 32.859001 c
430.174011 32.469002 430.814026 32.27 431.641022 32.27 c
431.868011 32.27 432.063019 32.281002 432.221008 32.303001 c
432.378021 32.326 432.53302 32.357002 432.684021 32.396 c
432.846008 32.436001 432.97403 32.475002 433.064026 32.512001 c
433.064026 32.512001 433.264008 32.592003 433.332031 32.619003 c
433.332031 32.705002 433.332031 33.527 433.332031 33.652 c
433.307007 33.652 433.295013 33.652 433.281006 33.652 c
433.244019 33.627003 433.059021 33.504002 433.059021 33.504002 c
432.959015 33.441002 432.849976 33.385002 432.731018 33.329998 c
432.597015 33.27 432.446014 33.219002 432.284027 33.182003 c
432.121033 33.143002 431.953033 33.123001 431.785034 33.123001 c
431.589996 33.123001 431.40802 33.143002 431.242035 33.18 c
431.073029 33.219002 430.923035 33.283001 430.795013 33.371002 c
430.663025 33.461002 430.555023 33.584003 430.475006 33.736 c
430.39502 33.887001 430.348022 34.076 430.334015 34.297001 c
430.328033 34.375 l
430.328033 34.375 433.267029 34.375 433.409027 34.375 c
433.409027 34.484001 433.409027 34.807003 433.409027 34.807003 c
433.409027 35.475002 433.241028 35.994003 432.909027 36.349998 c
432.578033 36.703003 432.074036 36.883003 431.410004 36.883003 c
430.678009 36.883003 430.100006 36.669998 429.695007 36.248001 c
h
431.302032 36.141003 m
431.59201 36.141003 431.813019 36.053001 431.957031 35.879002 c
432.098022 35.711002 432.173035 35.465 432.182007 35.152 c
432.184021 35.074001 l
430.325012 35.074001 l
430.329987 35.154003 l
430.347015 35.453003 430.439026 35.693001 430.605011 35.871002 c
430.77301 36.049004 431.008026 36.141003 431.302032 36.141003 c
f
n
436.811035 36.687 m
436.682007 36.647003 436.568024 36.596001 436.472015 36.537003 c
436.381012 36.484001 436.279022 36.416 436.16803 36.328003 c
435.78302 36.008003 l
435.779999 36.166 l
435.779999 36.166 435.779999 36.623001 435.779999 36.739998 c
435.653015 36.739998 434.657013 36.739998 434.529999 36.739998 c
434.529999 36.598003 434.529999 32.533001 434.529999 32.391003 c
434.657013 32.391003 435.653015 32.391003 435.779999 32.391003 c
435.779999 32.533001 435.779999 35.371002 435.779999 35.371002 c
435.828033 35.391003 l
435.981018 35.449001 436.143036 35.5 436.308014 35.545002 c
436.475006 35.588001 436.637024 35.611 436.789978 35.611 c
437.134033 35.596001 l
437.234009 35.588001 437.309021 35.574001 437.367035 35.555 c
437.372009 35.555 437.386017 35.555 437.399994 35.555 c
437.399994 35.682003 437.399994 36.623001 437.399994 36.739998 c
437.361023 36.744003 437.319977 36.746002 437.319977 36.746002 c
437.171021 36.75 l
437.059998 36.75 436.938019 36.729 436.811035 36.687 c
f
n
439.185028 36.744003 m
438.932007 36.666 438.71701 36.563004 438.546021 36.432003 c
438.377014 36.301003 438.246033 36.149998 438.160004 35.982002 c
438.074036 35.816002 438.029999 35.639 438.029999 35.451 c
438.029999 35.121002 438.114014 34.854 438.279022 34.652 c
438.446014 34.451 438.701019 34.295002 439.037018 34.191002 c
439.160004 34.152 439.302032 34.117001 439.461029 34.088001 c
439.869019 34.0 l
440.081024 33.949001 440.223022 33.895 440.301025 33.834003 c
440.389008 33.766003 440.434021 33.668003 440.434021 33.539001 c
440.434021 33.426003 440.387024 33.27 440.161011 33.178001 c
440.002014 33.111 439.81601 33.079998 439.609985 33.079998 c
439.412018 33.079998 439.226013 33.102001 439.057007 33.148003 c
438.889008 33.193001 438.736023 33.248001 438.60202 33.311001 c
438.447021 33.379002 438.323029 33.445 438.234009 33.509998 c
438.234009 33.509998 438.059021 33.639 438.025024 33.664001 c
438.019012 33.664001 438.016022 33.664001 438.008026 33.664001 c
438.008026 33.537003 438.008026 32.691002 438.008026 32.605003 c
438.189026 32.52 438.413025 32.441002 438.684021 32.375 c
438.972015 32.307003 439.282013 32.27 439.605011 32.27 c
439.961029 32.27 440.268036 32.309002 440.521027 32.383003 c
440.772034 32.457001 440.993011 32.564003 441.178009 32.699001 c
441.349976 32.822002 441.484009 32.977001 441.576019 33.156002 c
441.669983 33.334003 441.71701 33.525002 441.71701 33.723003 c
441.71701 34.037003 441.639008 34.291 441.484009 34.477001 c
441.328033 34.666 441.09201 34.813004 440.785034 34.912003 c
440.643036 34.959003 440.496033 34.996002 440.346008 35.023003 c
439.927032 35.111 l
439.682007 35.169998 439.52301 35.23 439.443024 35.299 c
439.357025 35.371002 439.313019 35.471001 439.313019 35.596001 c
439.313019 35.739998 439.39801 35.855003 439.564026 35.939003 c
439.715027 36.014 439.89801 36.051003 440.111023 36.051003 c
440.268036 36.051003 440.424011 36.033001 440.574036 35.998001 c
440.72403 35.961002 440.861023 35.916 440.981018 35.861 c
441.083008 35.814003 441.188019 35.758003 441.29303 35.695004 c
441.29303 35.695004 441.445007 35.594002 441.504028 35.555 c
441.508026 35.555 441.512024 35.555 441.518036 35.555 c
441.518036 35.68 441.518036 36.479 441.518036 36.564003 c
441.349976 36.643002 441.147034 36.711002 440.907013 36.77 c
440.649017 36.829998 440.363007 36.861 440.055023 36.861 c
439.732025 36.861 439.440002 36.822002 439.185028 36.744003 c
f
n
442.756012 38.471001 m
442.756012 38.349998 442.756012 37.648003 442.756012 37.529003 c
442.884033 37.529003 443.955017 37.529003 444.083008 37.529003 c
444.083008 37.648003 444.083008 38.349998 444.083008 38.471001 c
443.955017 38.471001 442.884033 38.471001 442.756012 38.471001 c
h
442.800018 36.739998 m
442.800018 36.598003 442.800018 32.533001 442.800018 32.391003 c
442.927032 32.391003 443.924011 32.391003 444.049988 32.391003 c
444.049988 32.533001 444.049988 36.598003 444.049988 36.739998 c
443.924011 36.739998 442.927032 36.739998 442.800018 36.739998 c
f
n
445.583008 38.029003 m
445.583008 37.896 445.583008 36.739998 445.583008 36.739998 c
445.583008 36.739998 445.154022 36.739998 445.04303 36.739998 c
445.04303 36.623001 445.04303 36.025002 445.04303 35.908001 c
445.154022 35.908001 445.583008 35.908001 445.583008 35.908001 c
445.583008 33.732002 l
445.583008 33.225002 445.706024 32.855003 445.948029 32.637001 c
446.194031 32.416 446.598022 32.303001 447.14801 32.303001 c
447.392029 32.303001 447.601013 32.314003 447.768036 32.336002 c
447.916016 32.355003 448.05603 32.385002 448.188019 32.418003 c
448.188019 32.518002 448.188019 33.146 448.188019 33.268002 c
448.174011 33.268002 448.163025 33.268002 448.157013 33.268002 c
448.10202 33.239998 448.022034 33.213001 447.906036 33.184002 c
447.776031 33.149998 447.674011 33.135002 447.59201 33.135002 c
447.393036 33.135002 447.245026 33.164001 447.138031 33.227001 c
447.028015 33.289001 446.949982 33.377003 446.906036 33.486 c
446.863007 33.586002 446.839996 33.701 446.837036 33.828003 c
446.833008 34.242001 l
446.833008 35.908001 l
446.833008 35.908001 448.055023 35.908001 448.188019 35.908001 c
448.188019 36.025002 448.188019 36.623001 448.188019 36.739998 c
448.055023 36.739998 446.833008 36.739998 446.833008 36.739998 c
446.833008 36.739998 446.833008 37.896 446.833008 38.029003 c
446.706024 38.029003 445.709991 38.029003 445.583008 38.029003 c
f
n
451.915009 36.739998 m
451.884033 36.639 450.981018 33.752003 450.981018 33.752003 c
450.981018 33.752003 450.016022 36.641003 449.982025 36.739998 c
449.889984 36.739998 448.85202 36.739998 448.673035 36.739998 c
448.745026 36.547001 450.292023 32.426003 450.292023 32.426003 c
450.292023 32.426003 449.708008 30.92 449.638031 30.738001 c
449.819031 30.738001 450.894012 30.738001 450.984009 30.738001 c
451.019989 30.832001 453.126007 36.545002 453.198029 36.739998 c
453.021027 36.739998 452.009033 36.739998 451.915009 36.739998 c
f
n
456.488007 36.27 m
456.097015 35.863003 455.899017 35.289001 455.899017 34.563004 c
455.899017 33.846001 456.097015 33.275002 456.488007 32.865002 c
456.878021 32.455002 457.436035 32.248001 458.14502 32.248001 c
458.858032 32.248001 459.417023 32.455002 459.805023 32.865002 c
460.193024 33.275002 460.389984 33.846001 460.389984 34.563004 c
460.389984 35.283001 460.192017 35.855003 459.803009 36.266003 c
459.414032 36.676003 458.856018 36.883003 458.14502 36.883003 c
457.436035 36.883003 456.878021 36.676003 456.488007 36.27 c
h
457.44101 33.434002 m
457.364014 33.543003 457.301025 33.688 457.253021 33.867001 c
457.206024 34.043003 457.183014 34.273003 457.183014 34.555 c
457.183014 34.838001 457.208008 35.074001 457.257019 35.262001 c
457.308014 35.453003 457.377014 35.607002 457.463013 35.719002 c
457.557007 35.84 457.662018 35.922001 457.776031 35.967003 c
457.886017 36.008003 458.011017 36.029003 458.14502 36.029003 c
458.288025 36.029003 458.41803 36.006001 458.531036 35.957001 c
458.647034 35.908001 458.753021 35.82 458.844025 35.697002 c
458.927032 35.582001 458.992035 35.43 459.038025 35.242001 c
459.084015 35.059002 459.106018 34.828003 459.106018 34.555 c
459.106018 34.264 459.085022 34.031002 459.039978 33.863003 c
458.995026 33.691002 458.928009 33.545002 458.839996 33.422001 c
458.763031 33.314003 458.657013 33.232002 458.528015 33.18 c
458.403015 33.127003 458.278015 33.102001 458.157013 33.102001 c
458.011017 33.102001 457.875031 33.127003 457.754028 33.18 c
457.629028 33.232002 457.52301 33.318001 457.44101 33.434002 c
f
n
462.046021 38.123001 m
461.774017 37.863003 461.638031 37.465 461.638031 36.939003 c
461.638031 36.739998 l
461.638031 36.739998 461.188019 36.739998 461.075012 36.739998 c
461.075012 36.623001 461.075012 36.025002 461.075012 35.908001 c
461.188019 35.908001 461.638031 35.908001 461.638031 35.908001 c
461.638031 35.908001 461.638031 32.535 461.638031 32.391003 c
461.765015 32.391003 462.761017 32.391003 462.888031 32.391003 c
462.888031 32.535 462.888031 35.908001 462.888031 35.908001 c
462.888031 35.908001 463.827026 35.908001 463.956024 35.908001 c
463.956024 36.025002 463.956024 36.623001 463.956024 36.739998 c
463.826019 36.739998 462.843018 36.739998 462.843018 36.739998 c
462.843018 36.849998 l
462.843018 37.158001 462.901031 37.365002 463.018036 37.484001 c
463.138031 37.604 463.344025 37.66 463.649017 37.66 c
463.756012 37.66 463.869995 37.648003 463.98703 37.621002 c
463.98703 37.621002 464.179993 37.574001 464.229034 37.563004 c
464.233032 37.563004 464.244019 37.563004 464.255035 37.563004 c
464.255035 37.682003 464.255035 38.34 464.255035 38.445004 c
464.142029 38.463001 464.015015 38.48 463.866028 38.492001 c
463.693024 38.508003 463.504028 38.514 463.304016 38.514 c
462.742035 38.514 462.319031 38.383003 462.046021 38.123001 c
f
n
467.028015 38.471001 m
467.028015 38.349998 467.028015 37.617001 467.028015 37.496002 c
467.166016 37.496002 468.79303 37.496002 468.79303 37.496002 c
468.79303 37.496002 468.79303 32.537003 468.79303 32.391003 c
468.921021 32.391003 470.014008 32.391003 470.142029 32.391003 c
470.142029 32.537003 470.142029 37.496002 470.142029 37.496002 c
470.142029 37.496002 471.768036 37.496002 471.905029 37.496002 c
471.905029 37.617001 471.905029 38.349998 471.905029 38.471001 c
471.763031 38.471001 467.172028 38.471001 467.028015 38.471001 c
f
n
472.571014 36.248001 m
472.165009 35.826 471.959991 35.252003 471.959991 34.541 c
471.959991 33.814003 472.179993 33.25 472.614014 32.859001 c
473.049988 32.469002 473.690002 32.27 474.517029 32.27 c
474.745026 32.27 474.939026 32.281002 475.097015 32.303001 c
475.254028 32.326 475.409027 32.357002 475.559998 32.396 c
475.722015 32.436001 475.849976 32.475002 475.940002 32.512001 c
475.940002 32.512001 476.139984 32.592003 476.208008 32.619003 c
476.208008 32.705002 476.208008 33.527 476.208008 33.652 c
476.183014 33.652 476.171021 33.652 476.157013 33.652 c
476.119995 33.627003 475.935028 33.504002 475.935028 33.504002 c
475.835022 33.441002 475.726013 33.385002 475.608032 33.329998 c
475.47403 33.27 475.322021 33.219002 475.160004 33.182003 c
474.997009 33.143002 474.82901 33.123001 474.661011 33.123001 c
474.466034 33.123001 474.284027 33.143002 474.119019 33.18 c
473.949036 33.219002 473.799011 33.283001 473.671021 33.371002 c
473.539032 33.461002 473.43103 33.584003 473.351013 33.736 c
473.271027 33.887001 473.22403 34.076 473.209991 34.297001 c
473.205017 34.375 l
473.205017 34.375 476.143036 34.375 476.286011 34.375 c
476.286011 34.484001 476.286011 34.807003 476.286011 34.807003 c
476.286011 35.475002 476.117035 35.994003 475.785034 36.349998 c
475.45401 36.703003 474.949982 36.883003 474.286011 36.883003 c
473.554016 36.883003 472.97702 36.669998 472.571014 36.248001 c
h
474.178009 36.141003 m
474.468018 36.141003 474.689026 36.053001 474.833008 35.879002 c
474.97403 35.711002 475.049011 35.465 475.058014 35.152 c
475.059998 35.074001 l
473.201019 35.074001 l
473.206024 35.154003 l
473.223022 35.453003 473.315033 35.693001 473.481018 35.871002 c
473.649017 36.049004 473.884033 36.141003 474.178009 36.141003 c
f
n
478.56601 36.73 m
478.275024 36.643002 478.018036 36.509998 477.804016 36.329998 c
477.582031 36.143002 477.403015 35.900002 477.272034 35.611 c
477.142029 35.32 477.075012 34.963001 477.075012 34.545002 c
477.075012 34.156002 477.137024 33.816002 477.258026 33.531002 c
477.378021 33.248001 477.547028 33.009998 477.761017 32.824001 c
477.97702 32.637001 478.238037 32.496002 478.535034 32.406002 c
478.835022 32.316002 479.169037 32.27 479.529999 32.27 c
479.719025 32.27 479.872009 32.279003 479.98703 32.299 c
480.103027 32.318001 480.22702 32.348003 480.361023 32.385002 c
480.46701 32.412003 480.571014 32.449001 480.673035 32.492001 c
480.673035 32.492001 480.827026 32.561001 480.905029 32.594002 c
480.905029 32.678001 480.905029 33.549 480.905029 33.674 c
480.869019 33.674 480.85202 33.674 480.831024 33.674 c
480.796021 33.641003 480.679016 33.529003 480.679016 33.529003 c
480.609985 33.465 480.525024 33.402 480.428009 33.342003 c
480.326019 33.281002 480.205017 33.23 480.067017 33.188 c
479.927032 33.145 479.764008 33.123001 479.581024 33.123001 c
479.215027 33.123001 478.916016 33.244003 478.692017 33.48 c
478.472015 33.717003 478.358032 34.074001 478.358032 34.545002 c
478.358032 34.984001 478.463013 35.34 478.669037 35.604 c
478.878021 35.871002 479.178009 36.008003 479.558014 36.008003 c
479.721008 36.008003 479.872009 35.986 480.007019 35.945004 c
480.139984 35.904003 480.261017 35.854 480.366028 35.795002 c
480.465027 35.738003 480.558014 35.676003 480.642029 35.607002 c
480.642029 35.607002 480.789978 35.479 480.82901 35.445004 c
480.84903 35.445004 480.868011 35.445004 480.905029 35.445004 c
480.905029 35.572002 480.905029 36.441002 480.905029 36.525002 c
480.675018 36.637001 480.443024 36.723003 480.216034 36.775002 c
479.976013 36.832001 479.731018 36.861 479.48999 36.861 c
479.171021 36.861 478.859985 36.816002 478.56601 36.73 c
f
n
481.962036 38.471001 m
481.962036 38.326 481.962036 32.535 481.962036 32.391003 c
482.08902 32.391003 483.085022 32.391003 483.212036 32.391003 c
483.212036 32.535 483.212036 35.539001 483.212036 35.539001 c
483.245026 35.561001 l
483.384033 35.658001 483.517029 35.729 483.641022 35.773003 c
483.767029 35.818001 483.893036 35.842003 484.017029 35.842003 c
484.18103 35.842003 484.315033 35.816002 484.417023 35.77 c
484.52301 35.717003 484.605011 35.633003 484.661011 35.516003 c
484.706024 35.419998 484.735016 35.281002 484.751038 35.092003 c
484.766022 34.91 484.77301 34.727001 484.77301 34.543003 c
484.77301 34.543003 484.77301 32.531002 484.77301 32.391003 c
484.899994 32.391003 485.896027 32.391003 486.02301 32.391003 c
486.02301 32.533001 486.02301 35.242001 486.02301 35.242001 c
486.02301 35.771 485.907013 36.178001 485.677032 36.453003 c
485.449982 36.723003 485.114014 36.861 484.68103 36.861 c
484.429993 36.861 484.198029 36.809002 483.991028 36.705002 c
483.779999 36.598003 483.559998 36.447002 483.336029 36.258003 c
483.212036 36.152 l
483.212036 36.152 483.212036 38.329998 483.212036 38.471001 c
483.085022 38.471001 482.08902 38.471001 481.962036 38.471001 c
f
n
489.488037 36.705002 m
489.276031 36.598003 489.05603 36.447002 488.833038 36.258003 c
488.709015 36.152 l
488.709015 36.152 488.709015 36.631001 488.709015 36.739998 c
488.582031 36.739998 487.585022 36.739998 487.459015 36.739998 c
487.459015 36.598003 487.459015 32.533001 487.459015 32.391003 c
487.585022 32.391003 488.582031 32.391003 488.709015 32.391003 c
488.709015 32.535 488.709015 35.539001 488.709015 35.539001 c
488.741028 35.561001 l
488.879974 35.658001 489.014038 35.729 489.138031 35.773003 c
489.263031 35.818001 489.389984 35.842003 489.514038 35.842003 c
489.677032 35.842003 489.811035 35.816002 489.913025 35.77 c
490.021027 35.717003 490.103027 35.633003 490.157013 35.516003 c
490.202026 35.419998 490.231018 35.281002 490.247009 35.092003 c
490.263031 34.91 490.271027 34.727001 490.271027 34.543003 c
490.271027 34.543003 490.271027 32.531002 490.271027 32.391003 c
490.396027 32.391003 491.393036 32.391003 491.521027 32.391003 c
491.521027 32.533001 491.521027 35.242001 491.521027 35.242001 c
491.521027 35.771 491.403015 36.178001 491.173035 36.453003 c
490.946014 36.723003 490.611023 36.861 490.177032 36.861 c
489.927032 36.861 489.694031 36.809002 489.488037 36.705002 c
f
n
493.21402 36.27 m
492.823029 35.863003 492.624023 35.289001 492.624023 34.563004 c
492.624023 33.846001 492.823029 33.275002 493.21402 32.865002 c
493.604034 32.455002 494.161011 32.248001 494.869995 32.248001 c
495.585022 32.248001 496.143036 32.455002 496.529999 32.865002 c
496.919037 33.275002 497.116028 33.846001 497.116028 34.563004 c
497.116028 35.283001 496.91803 35.855003 496.528015 36.266003 c
496.139984 36.676003 495.581024 36.883003 494.869995 36.883003 c
494.161011 36.883003 493.604034 36.676003 493.21402 36.27 c
h
494.167023 33.434002 m
494.08902 33.543003 494.026031 33.688 493.979034 33.867001 c
493.932037 34.043003 493.907013 34.273003 493.907013 34.555 c
493.907013 34.838001 493.933014 35.074001 493.982025 35.262001 c
494.03302 35.453003 494.10202 35.607002 494.189026 35.719002 c
494.282013 35.84 494.388031 35.922001 494.502014 35.967003 c
494.61203 36.008003 494.735016 36.029003 494.869995 36.029003 c
495.013031 36.029003 495.143036 36.006001 495.257019 35.957001 c
495.374023 35.908001 495.479034 35.82 495.569031 35.697002 c
495.652039 35.582001 495.718018 35.43 495.765015 35.242001 c
495.809998 35.059002 495.833038 34.828003 495.833038 34.555 c
495.833038 34.264 495.809998 34.031002 495.767029 33.863003 c
495.721008 33.691002 495.653015 33.545002 495.565033 33.422001 c
495.48703 33.314003 495.384033 33.232002 495.255035 33.18 c
495.129028 33.127003 495.004028 33.102001 494.882019 33.102001 c
494.735016 33.102001 494.601013 33.127003 494.479034 33.18 c
494.354034 33.232002 494.249023 33.318001 494.167023 33.434002 c
f
n
498.264038 38.471001 m
498.264038 38.326 498.264038 32.535 498.264038 32.391003 c
498.391022 32.391003 499.387024 32.391003 499.514038 32.391003 c
499.514038 32.535 499.514038 38.326 499.514038 38.471001 c
499.387024 38.471001 498.391022 38.471001 498.264038 38.471001 c
f
n
501.243011 36.27 m
500.85202 35.863003 500.653015 35.289001 500.653015 34.563004 c
500.653015 33.846001 500.85202 33.275002 501.243011 32.865002 c
501.634033 32.455002 502.190002 32.248001 502.899017 32.248001 c
503.614014 32.248001 504.173035 32.455002 504.559998 32.865002 c
504.948029 33.275002 505.14502 33.846001 505.14502 34.563004 c
505.14502 35.283001 504.948029 35.855003 504.558014 36.266003 c
504.169037 36.676003 503.609985 36.883003 502.899017 36.883003 c
502.190002 36.883003 501.634033 36.676003 501.243011 36.27 c
h
502.196014 33.434002 m
502.118011 33.543003 502.05603 33.688 502.008026 33.867001 c
501.961029 34.043003 501.936035 34.273003 501.936035 34.555 c
501.936035 34.838001 501.962036 35.074001 502.012024 35.262001 c
502.063019 35.453003 502.132019 35.607002 502.218018 35.719002 c
502.311035 35.84 502.417023 35.922001 502.531036 35.967003 c
502.642029 36.008003 502.765015 36.029003 502.899017 36.029003 c
503.042023 36.029003 503.173035 36.006001 503.286011 35.957001 c
503.403015 35.908001 503.508026 35.82 503.59903 35.697002 c
503.682037 35.582001 503.747009 35.43 503.794037 35.242001 c
503.83902 35.059002 503.86203 34.828003 503.86203 34.555 c
503.86203 34.264 503.839996 34.031002 503.796021 33.863003 c
503.751038 33.691002 503.683014 33.545002 503.595032 33.422001 c
503.518036 33.314003 503.413025 33.232002 503.284027 33.18 c
503.159027 33.127003 503.03302 33.102001 502.911011 33.102001 c
502.766022 33.102001 502.629974 33.127003 502.509033 33.18 c
502.384033 33.232002 502.278015 33.318001 502.196014 33.434002 c
f
n
507.071014 36.713001 m
506.848022 36.615002 506.654022 36.475002 506.497009 36.295002 c
506.329987 36.105003 506.198029 35.873001 506.104034 35.604 c
506.011017 35.332001 505.962036 35.021 505.962036 34.68 c
505.962036 33.928001 506.116028 33.361 506.419983 32.998001 c
506.720001 32.641003 507.154022 32.457001 507.711029 32.457001 c
507.919037 32.457001 508.124023 32.498001 508.321014 32.578003 c
508.519012 32.658001 508.696014 32.768002 508.848022 32.900002 c
508.972015 33.009998 l
508.972015 32.759998 l
508.972015 32.561001 508.955017 32.395 508.921021 32.262001 c
508.887024 32.125 508.825012 32.004002 508.73703 31.902002 c
508.64801 31.801001 508.517029 31.723001 508.345032 31.668001 c
508.179993 31.617001 507.973022 31.592001 507.729034 31.592001 c
507.61203 31.592001 507.495026 31.602001 507.381012 31.619001 c
507.379974 31.619001 507.038025 31.693001 507.038025 31.693001 c
507.037018 31.693001 506.747009 31.783001 506.747009 31.783001 c
506.747009 31.783001 506.564026 31.848001 506.513031 31.867001 c
506.501038 31.867001 506.47403 31.867001 506.436035 31.867001 c
506.436035 31.744001 506.436035 30.973001 506.436035 30.871002 c
506.618011 30.828001 506.828033 30.787001 507.069031 30.752001 c
507.333038 30.713001 507.616028 30.693001 507.909027 30.693001 c
508.255035 30.693001 508.575012 30.73 508.858032 30.801001 c
509.138031 30.873001 509.379974 30.988001 509.578033 31.146002 c
509.775024 31.301001 509.933014 31.519001 510.048035 31.797001 c
510.163025 32.078003 510.222015 32.426003 510.222015 32.829998 c
510.222015 32.829998 510.222015 36.596001 510.222015 36.739998 c
510.095032 36.739998 509.09903 36.739998 508.999023 36.739998 c
508.983032 36.682003 508.935028 36.494003 508.935028 36.494003 c
508.848022 36.551003 l
508.70401 36.647003 508.544037 36.723003 508.369019 36.777 c
508.196014 36.832001 507.995026 36.861 507.774017 36.861 c
507.532013 36.861 507.296021 36.811001 507.071014 36.713001 c
h
507.438019 33.744003 m
507.363037 33.855003 507.311035 33.986 507.284027 34.131001 c
507.259033 34.27 507.245026 34.443001 507.245026 34.643002 c
507.245026 35.051003 507.337036 35.375 507.517029 35.605003 c
507.700012 35.844002 507.976013 35.963001 508.335022 35.963001 c
508.44101 35.963001 508.549011 35.951 508.655029 35.93 c
508.763031 35.906002 508.854034 35.879002 508.929016 35.844002 c
508.972015 35.824001 l
508.972015 33.686001 l
508.94101 33.664001 l
508.826019 33.578003 508.703033 33.514 508.575012 33.467003 c
508.446014 33.422001 508.314026 33.398003 508.179016 33.398003 c
507.999023 33.398003 507.84903 33.428001 507.731018 33.484001 c
507.609985 33.543003 507.513031 33.631001 507.438019 33.744003 c
f
n
514.426025 36.739998 m
514.393005 36.639 513.491028 33.752003 513.491028 33.752003 c
513.491028 33.752003 512.526001 36.641003 512.493042 36.739998 c
512.400024 36.739998 511.36203 36.739998 511.184021 36.739998 c
511.256012 36.547001 512.80304 32.426003 512.80304 32.426003 c
512.80304 32.426003 512.218018 30.92 512.147034 30.738001 c
512.329041 30.738001 513.405029 30.738001 513.494995 30.738001 c
513.529968 30.832001 515.637024 36.545002 515.708008 36.739998 c
515.531006 36.739998 514.519043 36.739998 514.426025 36.739998 c
f
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
